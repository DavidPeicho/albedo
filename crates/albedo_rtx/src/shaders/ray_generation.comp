#version 450

#extension GL_GOOGLE_include_directive : enable

#include "structures.comp"

/**
 * Layout 0
 */

layout (set = 0, binding = 0, std430) writeonly buffer RayBuffer {
  RayPayload rays[];
};

layout (set = 0, binding = 1) readonly uniform CameraUniformsBuffer {
  vec3 origin;
  float vFOV;
  vec3 up;
  float padding_0;
  vec3 right;
  float padding_1;
} CameraUniforms;

/* Utils */

uint
WangHash(inout uint seed)
{
  seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
  seed *= uint(9);
  seed = seed ^ (seed >> 4);
  seed *= uint(0x27d4eb2d);
  seed = seed ^ (seed >> 15);
  return seed;
}

float rand(inout uint seed)
{
  return float(WangHash(seed)) / 4294967296.0;
}

RayPayload
generateRay(uvec3 coords, uvec2 dimensions)
{
  RayPayload ray;

  float half_w = float(dimensions.x) * 0.5;
  float half_h = float(dimensions.y) * 0.5;

  vec3 clip = vec3(
    coords.x - half_w,
    coords.y - half_h,
    half_h / tan(CameraUniforms.vFOV * 0.5)
  );

  // TODO: pack direction directly?
  vec3 dir = normalize(cross(CameraUniforms.up, CameraUniforms.right));

  // `throughput` is packed in `origin.w`, `dir.w`, and `radiance.w`.
  ray.origin = vec4(CameraUniforms.origin, 1.0);
  ray.dir = vec4(
    normalize(clip.x * CameraUniforms.right + clip.y * CameraUniforms.up + clip.z * dir),
    1.0 // throughput component
  );
  ray.radiance = vec4(vec3(0.0), 1.0);

  return ray;
}

// @todo: not hardcoding that means generating the shader at runtime
layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  // @todo: use `gl_NumWorkGroups` when Naga is fixed.
  uvec2 dimensions = uvec2(1600, 1200);
  uvec2 numworkGroups = uvec2(dimensions.x / 8, dimensions.y / 8);
  uint index =
    gl_GlobalInvocationID.z * gl_WorkGroupSize.x * numworkGroups.x * gl_WorkGroupSize.y * numworkGroups.y +
    gl_GlobalInvocationID.y * gl_WorkGroupSize.x * numworkGroups.x +
    gl_GlobalInvocationID.x;
  rays[index] = generateRay(gl_GlobalInvocationID, dimensions);
}
