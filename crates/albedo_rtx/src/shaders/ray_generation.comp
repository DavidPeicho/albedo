#version 450

#extension GL_GOOGLE_include_directive : enable

#include "structures.comp"

/**
 * Layout 0
 */

// @todo: use writeonly when WGPU supports it.
layout (set = 0, binding = 0, std430) buffer RayBuffer {
  RayPayload rays[];
};

layout (set = 0, binding = 1) readonly uniform CameraUniformsBuffer {
  vec3 origin;
  float vFOV;
  vec3 up;
  float padding_0;
  vec3 right;
  float padding_1;
  uvec2 dimensions;
  uvec2 padding_2;
} CameraUniforms;

RayPayload
generateRay(uvec3 coords, uvec2 dimensions)
{
  RayPayload ray;

  // vec2 half = vec2(CameraUniforms.dimensions) * 0.5;
  vec2 halfSize = vec2(dimensions) * 0.5;
  vec3 clip = vec3(
    coords.x - halfSize.x,
    coords.y - halfSize.y,
    halfSize.y / tan(CameraUniforms.vFOV * 0.5)
  );

  // TODO: pack direction directly?
  vec3 dir = normalize(cross(CameraUniforms.up, CameraUniforms.right));

  // `throughput` is packed in `origin.w`, `dir.w`, and `radiance.w`.
  ray.origin = vec4(CameraUniforms.origin, 1.0);
  ray.dir = vec4(
    normalize(clip.x * CameraUniforms.right + clip.y * CameraUniforms.up + clip.z * dir),
    1.0 // throughput component
  );
  ray.radiance = vec4(0.0, 0.0, 0.0, 1.0);
  ray.terminated = 0u;

  return ray;
}

// @todo: not hardcoding that means generating the shader at runtime
layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  uint index =
    gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_NumWorkGroups.x * gl_WorkGroupSize.y * gl_NumWorkGroups.y +
    gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x +
    gl_GlobalInvocationID.x;

  // @todo: maybe let's just make the array bigger?
  if (index < rays.length())
  {
    rays[index] = generateRay(gl_GlobalInvocationID, CameraUniforms.dimensions);
  }
}
