#version 450

#extension GL_GOOGLE_include_directive : enable

#include "utils/math.glsl"
#include "structures.glsl"

layout (set = 0, binding = 0, std430) readonly buffer InstanceBuffer {
  Instance instances[];
};

layout (set = 0, binding = 1, std430) readonly buffer BVHNodeBuffer {
  BVHNode nodes[];
};

layout (set = 0, binding = 2, std430) readonly buffer IndexBuffer {
  uint indices[];
};

layout (set = 0, binding = 3, std430) readonly buffer VertexBuffer {
  Vertex vertices[];
};

layout (set = 0, binding = 4, std430) readonly buffer LightBuffer {
  Light lights[];
};

layout (set = 0, binding = 5, std430) readonly buffer RayBuffer {
  RayPayload rays[];
};

// @todo: use writeonly when WGPU supports it.
layout (set = 0, binding = 6, std430) buffer IntersectionBuffer {
  Intersection intersections[];
};

/* Utils */

#include "utils/intersection_utils.glsl"

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
  if (index >= rays.length()) return;

  RayPayload rayPayload = rays[index];

  Ray ray;
  ray.origin = rayPayload.origin.xyz;
  ray.dir = rayPayload.dir.xyz;

  Intersection intersection;
  intersection.index = INVALID_UINT;
  intersection.instance = INVALID_UINT;
  intersection.emitter = INVALID_UINT;
  intersection.dist = sceneHit(ray, intersection);
  intersections[index] = intersection;
}
