#version 450

#extension GL_GOOGLE_include_directive : enable

#include "structures.comp"

#define PI_F 3.14159265359
#define TWO_PI 6.28318530718
#define TO_RAD_F (PI_F / 180.0)
#define MAX_FLOAT 3.402823466e+38

#define VEC3_UP vec3(0.0, 0.999999995, 0.0001)

#define MAX_UINT 0xFFFFFFFF
#define INVALID_UINT MAX_UINT

/**
 * Layout 0
 */

layout (set = 0, binding = 0, std430) readonly buffer InstanceBuffer {
  Instance instances[];
};

layout (set = 0, binding = 1, std430) readonly buffer BVHNodeBuffer {
  BVHNode nodes[];
};

layout (set = 0, binding = 2, std430) readonly buffer IndexBuffer {
  uint indices[];
};

layout (set = 0, binding = 3, std430) readonly buffer VertexBuffer {
  Vertex vertices[];
};

layout (set = 0, binding = 4, std430) readonly buffer LightBuffer {
  Light lights[];
};

layout (set = 0, binding = 5, std430) readonly buffer RayBuffer {
  RayPayload rays[];
};

// @todo: use writeonly when WGPU supports it.
layout (set = 0, binding = 6, std430) buffer IntersectionBuffer {
  Intersection intersections[];
};

#include "utils/intersection_utils.comp"

/* Utils */

uint
WangHash(inout uint seed)
{
  seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
  seed *= uint(9);
  seed = seed ^ (seed >> 4);
  seed *= uint(0x27d4eb2d);
  seed = seed ^ (seed >> 15);
  return seed;
}

float rand(inout uint seed)
{
  return float(WangHash(seed)) / 4294967296.0;
}

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
  if (index >= rays.length()) return;

  RayPayload rayPayload = rays[index];

  Ray ray;
  ray.origin = rayPayload.origin.xyz;
  ray.dir = rayPayload.dir.xyz;

  Intersection intersection;
  intersection.index = INVALID_UINT;
  intersection.instance = INVALID_UINT;
  intersection.emitter = INVALID_UINT;
  intersection.dist = sceneHit(ray, intersection);
  intersections[index] = intersection;
}
