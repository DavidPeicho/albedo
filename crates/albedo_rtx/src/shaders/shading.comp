#version 450

#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_GOOGLE_include_directive : enable

#include "structures.comp"
#include "utils/colorspace.comp"

#define PI_F 3.14159265359
#define TWO_PI 6.28318530718
#define TO_RAD_F (PI_F / 180.0)
#define MAX_FLOAT 3.402823466e+38

#define VEC3_UP vec3(0.0, 0.999999995, 0.0001)

#define MAX_UINT 0xFFFFFFFF
#define INVALID_UINT MAX_UINT

struct TextureInfo
{
  uint x;
  uint y;
  uint width;
  uint layerAndHeight; // 24 bits for height, 8 bits for layer index.
};

struct Material
{
  vec4  color;
  float roughnessFactor;
  float metallic;
  uint  albedoTexture;
  // @todo: for now, metal in B channel and roughness in G.
  uint  mraTexture;
};

/**
 * Layout 0.
 */

layout (set = 0, binding = 0, std430) buffer RayBuffer {
  RayPayload rays[];
};

layout (set = 0, binding = 1, std430) readonly buffer BVHNodeBuffer {
  BVHNode nodes[];
};

layout (set = 0, binding = 2, std430) readonly buffer IntersectionBuffer {
  Intersection intersections[];
};

layout (set = 0, binding = 3, std430) readonly buffer InstanceBuffer {
  Instance instances[];
};

layout (set = 0, binding = 4, std430) readonly buffer IndexBuffer {
  uint indices[];
};

layout (set = 0, binding = 5, std430) readonly buffer VertexBuffer {
  Vertex vertices[];
};

// @todo: move to uniform?
layout (set = 0, binding = 6, std430) readonly buffer LightBuffer {
  Light lights[];
};

layout (set = 0, binding = 7, std430) readonly buffer MaterialBuffer {
  Material materials[];
};

layout( set = 0, binding = 8 ) uniform texture2D Probe;

layout(set = 0, binding = 9) uniform utexture1D textureInfo;

layout(set = 0, binding = 10) uniform texture2DArray textureAtlas;

layout( set = 0, binding = 11 ) uniform sampler samplerNearest;

layout (set = 0, binding = 12) uniform GlobalUniformBuffer {
  GlobalUniforms global;
};

uint
WangHash(inout uint seed)
{
  seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
  seed *= uint(9);
  seed = seed ^ (seed >> 4);
  seed *= uint(0x27d4eb2d);
  seed = seed ^ (seed >> 15);
  return seed;
}

float rand(inout uint seed)
{
  return float(WangHash(seed)) / 4294967296.0;
}

/* Utils */

#include "utils/intersection_utils.comp"
#include "utils/texture_utils.comp"
#include "utils/sampling.comp"

vec3
decodeRGBE(vec4 hdr)
{
  return hdr.rgb * exp2((hdr.a * 255.0) - 128.0);
}

vec3
sampleProbe(sampler samp, texture2D probe, vec2 uv)
{
  return decodeRGBE(texture(sampler2D(probe, samp), uv));
}

vec3
getThroughput(inout RayPayload ray)
{
  return vec3(ray.origin.w, ray.dir.w, ray.radiance.w);
}

void
setThroughput(inout RayPayload ray, vec3 throughput)
{
  ray.origin.w = throughput.x;
  ray.dir.w = throughput.y;
  ray.radiance.w = throughput.z;
}

vec2
cartesianToEqui(vec3 dir)
{
  dir = dir.xzy;
  vec2 longlat = vec2(atan(dir.y, dir.x), acos(dir.z));
  longlat.x += PI_F;
  // Normalize
  return longlat / vec2(2.0 * PI_F, PI_F);
}

vec3 interpolate(vec3 v0, vec3 v1, vec3 v2, vec3 barycentric)
{
  return (
    barycentric.x * v0 +
    barycentric.y * v1 +
    barycentric.z * v2
  );
}

vec2 interpolate(vec2 v0, vec2 v1, vec2 v2, vec3 barycentric)
{
  return (
    barycentric.x * v0 +
    barycentric.y * v1 +
    barycentric.z * v2
  );
}

RayPayload
shade(RayPayload ray, Intersection intersection)
{
    uint randState = uint(
    gl_GlobalInvocationID.x * uint(1973)
    + gl_GlobalInvocationID.y * uint(9277)
    + uint(global.seed) * uint(26699)
  ) | uint(1);

  if (ray.terminated > 0u)
  {
    return ray;
  }

  vec3 throughput = getThroughput(ray);
  if (abs(MAX_FLOAT - intersection.dist) < EPSILON)
  {
    vec2 uv = cartesianToEqui(ray.dir.xyz);
    vec3 probe = sampleProbe(samplerNearest, Probe, uv);
    ray.radiance.rgb += throughput * probe;
    ray.terminated = 1u;
  }
  else if (intersection.emitter != INVALID_UINT)
  {
    Light light = lights[intersection.emitter];
    ray.radiance.rgb += throughput * vec3(1.0, 0.9, 0.8) * light.intensity;
  }
  else
  {
    Instance instance = instances[intersection.instance];

    vec3 barycentric = vec3(1.0 - intersection.uv.x - intersection.uv.y, intersection.uv);

    uint vertexOffset = instance.vertexRootIndex;
    Vertex vertex0 = getVertex(vertexOffset, intersection.index);
    Vertex vertex1 = getVertex(vertexOffset, intersection.index + 1);
    Vertex vertex2 = getVertex(vertexOffset, intersection.index + 2);

    // @todo: clean up uvs. Should UVs and normal always be packed together
    // anyway? The intersection code only need vertices.
    vec2 uv0 = vec2(vertex0.position.w, vertex0.normal.w);
    vec2 uv1 = vec2(vertex1.position.w, vertex1.normal.w);
    vec2 uv2 = vec2(vertex2.position.w, vertex2.normal.w);

    vec2 uv = interpolate(uv0, uv1, uv2, barycentric);
    vec3 normal = interpolate(
      vertex0.normal.xyz,
      vertex1.normal.xyz,
      vertex2.normal.xyz,
      barycentric
    );
    normal = transformDirection(normal, instance.modelToWorld);
    normal = normalize(normal);

    Material inputMat = materials[intersection.materialIndex];

    MaterialState mat;
    mat.albedo = sRGBToLinear(inputMat.color.rgb);
    if (inputMat.albedoTexture != MAX_UINT)
    {
      // @todo: pre-convert?
      mat.albedo *= sRGBToLinear(fetchTexture(samplerNearest, inputMat.albedoTexture, uv).rgb);
    }
    mat.metallic = inputMat.metallic;
    mat.perceptualRoughness = inputMat.roughnessFactor;
    if (inputMat.mraTexture != MAX_UINT)
    {
      vec4 mraFetch = fetchTexture(samplerNearest, inputMat.mraTexture, uv).rgba;
      mat.perceptualRoughness *= mraFetch.g;
      mat.metallic *= mraFetch.b;
    }
    mat.perceptualRoughness = max(EPSILON, mat.perceptualRoughness);
    mat.roughness = max(EPSILON, mat.perceptualRoughness * mat.perceptualRoughness);
    mat.roughness2 = mat.roughness * mat.roughness;

    BSDFSample bsdf = sampleBSDF_UE4(- ray.dir.xyz, normal, mat, randState);
    if (bsdf.pdf > EPSILON)
				throughput *= evalSample_UE4(bsdf, normal, mat) * abs(bsdf.NdotL) / bsdf.pdf;

    ray.origin.xyz += intersection.dist * ray.dir.xyz + normal * EPSILON;
    ray.dir.xyz = bsdf.dir;
  }

  setThroughput(ray, throughput);
  return ray;
}

layout(local_size_x = 8, local_size_y = 8) in;
void
main()
{
  uint index =
    gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_NumWorkGroups.x * gl_WorkGroupSize.y * gl_NumWorkGroups.y +
    gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x +
    gl_GlobalInvocationID.x;

  // @todo: maybe let's just make the array bigger?
  if (index < rays.length())
  {
    RayPayload ray = rays[index];
    Intersection intersection = intersections[index];
    // Modified ray is written back to SSBO.
    rays[index] = shade(ray, intersection);
  }
}
