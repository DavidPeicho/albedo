#version 450

#extension GL_GOOGLE_include_directive : enable

#include "imports/common.glsl"
#include "imports/colorspace.glsl"
#include "imports/math.glsl"
#include "imports/structures.glsl"
#include "imports/packing.glsl"

// @todo: Add previous frame matrix per instance.

layout(set = 0, binding = 0, std430) readonly buffer RayBuffer {
  // @todo: Split radiance into a separate texture.
  //
  // The problem is that the pathtracing shader has reached the
  // maximum amount of storage buffers per stage.
  RayPayload rays[];
};

layout(set = 0, binding = 1) uniform utexture2D gbufferPrevious;
layout(set = 0, binding = 2) uniform utexture2D gbuffer;
layout(set = 0, binding = 3) uniform texture2D motion;
layout(set = 0, binding = 4) uniform texture2D radiancePrevious;
layout(set = 0, binding = 5, rgba32f) writeonly uniform image2D radiance;
layout(set = 0, binding = 6) uniform sampler samplerNearest;

layout(set = 0, binding = 7, std430) readonly buffer HistoryBufferPrevious {
  uint historyLenPrevious[]; // @todo: Use u8
};
layout(set = 0, binding = 8, std430) buffer HistoryBuffer {
  uint historyLen[]; // @todo: Use u8
};

layout(set = 0, binding = 9) uniform texture2D momentsPrevious;
layout(set = 0, binding = 10, rg32f) writeonly uniform image2D moments;

bool validateDepth(float prev, float curr) {
  float depthThreshold = 0.5; // @todo: Should be based on precision of the depth range.
  return abs(curr - prev) < depthThreshold;
}

bool validateNormal(vec3 prev, vec3 curr) {
  float normalThreshold = 0.99; // @todo: Should be based on precision of the depth range.
  return dot(curr, prev) > normalThreshold;
}

bool validateCoords(ivec2 coords, ivec2 size) {
  return !(coords.x < 0 || coords.x > size.x || coords.y < 0 || coords.y > size.y);
}

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
  if (index >= rays.length()) return;

  ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(radiance);

  vec2 motion2d = texelFetch(sampler2D(motion, samplerNearest), coords, 0).xy;
  ivec2 prevCoords = coords - ivec2(motion2d * vec2(size));

  GBufferSample currSample = unpackGbuffer(texelFetch(usampler2D(gbuffer, samplerNearest), coords, 0));
  GBufferSample prevSample = unpackGbuffer(texelFetch(usampler2D(gbufferPrevious, samplerNearest), prevCoords, 0));

  RayPayload ray = rays[index];
  vec3 currRadiance = ray.radiance.rgb;

  // @todo: Instance ID
  if (currSample.depth < EPSILON
    || !validateCoords(prevCoords, size)
    || !validateDepth(prevSample.depth, currSample.depth)
    || !validateNormal(prevSample.normal, currSample.normal))
  {
    imageStore(radiance, coords, vec4(currRadiance, 1.0));
    historyLen[index] = 0u;
    return;
  }

  uint maxHistory = 128;

  /* History length */
  uint prevIndex = uint(prevCoords.y * size.x + prevCoords.x);
  uint history = max(min(historyLenPrevious[prevIndex] + 1u, maxHistory), 1u);
  historyLen[index] = history;

  float a = 1.0 / float(history); /* History interpolation coffecient */

  /* Moments */
  vec2 prevMoment = texelFetch(sampler2D(momentsPrevious, samplerNearest), prevCoords, 0).rg;
  float mu_1 = luminance(currRadiance); /* First raw moment */
  vec2 moment = vec2(mu_1, mu_1 * mu_1);
  moment = mix(prevMoment, moment, a);
  imageStore(moments, coords, vec4(moment, 0.0, 0.0));

  /* Color & variance */
  vec3 prevRadiance = texelFetch(sampler2D(radiancePrevious, samplerNearest), prevCoords, 0).rgb;
  vec3 color = mix(prevRadiance, currRadiance, a);
  float variance = max(moment.y - moment.x * moment.x, 0.0); /* mu_2' - mu_1'^2 */
  imageStore(radiance, coords, vec4(color, variance));
}
