#version 450

#include "imports/structures.glsl"
#include "imports/common.glsl"
#include "imports/colorspace.glsl"

struct TextureInfo
{
  uint x;
  uint y;
  uint width;
  uint layerAndHeight; // 24 bits for height, 8 bits for layer index.
};

struct Material
{
  vec4  color;
  float roughnessFactor;
  float metallic;
  uint  albedoTexture;
  // @todo: for now, metal in B channel and roughness in G.
  uint  mraTexture;
};

struct Parameters
{
  uint useNoiseTexture;
};

/**
 * Layout 0.
 */

layout(set = 0, binding = 0, std430) readonly buffer InstanceBuffer {
  Instance instances[];
};

layout(set = 0, binding = 1, std430) readonly buffer BVHNodeBuffer {
  BVHNode nodes[];
};

layout(set = 0, binding = 2, std430) readonly buffer IndexBuffer {
  uint indices[];
};

layout(set = 0, binding = 3, std430) readonly buffer VertexBuffer {
  Vertex vertices[];
};

// @todo: move to uniform?
layout(set = 0, binding = 4, std430) readonly buffer LightBuffer {
  Light lights[];
};

layout(set = 1, binding = 0, std430) readonly buffer MaterialBuffer {
  Material materials[];
};

layout(set = 1, binding = 1) uniform texture2D Probe;

layout(set = 1, binding = 2) uniform utexture1D textureInfo;

layout(set = 1, binding = 3) uniform texture2DArray textureAtlas;

layout(set = 1, binding = 4) uniform sampler samplerNearest;

layout(set = 1, binding = 5) uniform sampler samplerLinear;

layout(set = 1, binding = 6) uniform texture2D noiseTexture;

layout(set = 1, binding = 7) uniform ParametersUniformBuffer {
  Parameters parameters;
};

layout(set = 2, binding = 0, std430) buffer RayBuffer {
  RayPayload rays[];
};

layout(set = 2, binding = 1, std430) readonly buffer IntersectionBuffer {
  Intersection intersections[];
};

layout(set = 2, binding = 2) uniform GlobalUniformBuffer {
  GlobalUniforms global;
};

/* Utils */

#include "imports/math.glsl"
#include "imports/intersection_utils.glsl"
#include "imports/texture_utils.glsl"
#include "imports/sampling.glsl"

vec3
decodeRGBE(vec4 hdr)
{
  return hdr.rgb * exp2((hdr.a * 255.0) - 128.0);
}

vec3
sampleProbe(sampler samp, texture2D probe, vec2 uv)
{
  return decodeRGBE(textureLod(sampler2D(probe, samp), uv, 0.0));
}

vec3
getThroughput(inout RayPayload ray)
{
  return vec3(ray.origin.w, ray.dir.w, ray.radiance.w);
}

void
setThroughput(inout RayPayload ray, vec3 throughput)
{
  ray.origin.w = throughput.x;
  ray.dir.w = throughput.y;
  ray.radiance.w = throughput.z;
}

vec2
cartesianToEqui(vec3 dir)
{
  dir = dir.xzy;
  vec2 longlat = vec2(atan(dir.y, dir.x), acos(dir.z));
  longlat.x += PI_F;
  // Normalize
  return longlat / vec2(2.0 * PI_F, PI_F);
}

vec3
interpolate(vec3 v0, vec3 v1, vec3 v2, vec3 barycentric)
{
  return (
    barycentric.x * v0 +
    barycentric.y * v1 +
    barycentric.z * v2
  );
}

vec2
interpolate(vec2 v0, vec2 v1, vec2 v2, vec3 barycentric)
{
  return (
    barycentric.x * v0 +
    barycentric.y * v1 +
    barycentric.z * v2
  );
}

RayPayload
shade(RayPayload ray, Intersection intersection, uvec2 workgroupSize)
{
  if (ray.terminated.x > 0u) return ray;

  uint randState = uint(
    gl_GlobalInvocationID.x * uint(1973)
    + gl_GlobalInvocationID.y * uint(9277)
    + uint(global.seed) * uint(26699)
  ) | uint(1);

  if (parameters.useNoiseTexture > 0u) {
    // vec2 texSize = vec2(256.0);
    vec2 texSize = vec2(textureSize(noiseTexture, 0));
    vec2 uv = mod(vec2(gl_GlobalInvocationID.xy) * 100.0, texSize);
    uv = uv/texSize;
    vec3 noise = textureLod(sampler2D(noiseTexture, samplerNearest), uv, 0.0).rgb;
    randState = uint(noise.x * 10.0) * uint(global.seed) * uint(26699);
  }

  vec3 throughput = getThroughput(ray);
  if (abs(MAX_FLOAT - intersection.dist) < EPSILON)
  {
    float exposition = 0.5; // @todo: Expose exposition (no pun intended)
    vec2 uv = cartesianToEqui(ray.dir.xyz);
    vec3 probe = sampleProbe(samplerLinear, Probe, uv);
    probe = probe * exposition;
    ray.radiance.rgb += throughput * probe;
    ray.terminated.x = 1u;
    return ray;
  }
  else if (intersection.emitter != INVALID_UINT)
  {
    Light light = lights[intersection.emitter];
    ray.radiance.rgb += throughput * vec3(1.0, 0.9, 0.8) * light.intensity;
    return ray;
  }
  Instance instance = instances[intersection.instance];

  vec3 barycentric = vec3(1.0 - intersection.uv.x - intersection.uv.y, intersection.uv);

  uint vertexOffset = instance.vertexRootIndex;
  Vertex vertex0 = getVertex(vertexOffset, intersection.index);
  Vertex vertex1 = getVertex(vertexOffset, intersection.index + 1);
  Vertex vertex2 = getVertex(vertexOffset, intersection.index + 2);

  // @todo: clean up uvs. Should UVs and normal always be packed together
  // anyway? The intersection code only need vertices.
  vec2 uv0 = vec2(vertex0.position.w, vertex0.normal.w);
  vec2 uv1 = vec2(vertex1.position.w, vertex1.normal.w);
  vec2 uv2 = vec2(vertex2.position.w, vertex2.normal.w);

  vec2 uv = interpolate(uv0, uv1, uv2, barycentric);
  vec3 normal = interpolate(
    vertex0.normal.xyz,
    vertex1.normal.xyz,
    vertex2.normal.xyz,
    barycentric
  );
  normal = transformDirection(normal, instance.modelToWorld);
  normal = normalize(normal);

  Material inputMat = materials[intersection.materialIndex];

  MaterialState mat;
  mat.albedo = sRGBToLinear(inputMat.color.rgb);
  if (inputMat.albedoTexture != MAX_UINT)
  {
    // @todo: pre-convert?
    mat.albedo *= sRGBToLinear(fetchTexture(inputMat.albedoTexture, uv).rgb);
  }
  mat.metallic = inputMat.metallic;
  mat.perceptualRoughness = inputMat.roughnessFactor;
  if (inputMat.mraTexture != MAX_UINT)
  {
    vec4 mraFetch = fetchTexture(inputMat.mraTexture, uv).rgba;
    mat.perceptualRoughness *= mraFetch.g;
    mat.metallic *= mraFetch.b;
  }
  mat.perceptualRoughness = max(EPSILON, mat.perceptualRoughness);
  mat.roughness = max(EPSILON, mat.perceptualRoughness * mat.perceptualRoughness);
  mat.roughness2 = mat.roughness * mat.roughness;

  BSDFSample bsdf = sampleBSDF_UE4(- ray.dir.xyz, normal, mat, randState);
  if (bsdf.pdf > EPSILON)
      throughput *= evalSample_UE4(bsdf, normal, mat) * abs(bsdf.NdotL) / bsdf.pdf;

  ray.origin.xyz += intersection.dist * ray.dir.xyz + normal * EPSILON;
  ray.dir.xyz = bsdf.dir;

  // throughput.rgb = vec3(1.0, 0.0, 0.0);
  setThroughput(ray, throughput);

  return ray;
}

layout(local_size_x = 8, local_size_y = 8) in;
void
main()
{
  uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
  if (index >= rays.length()) return;

  RayPayload ray = rays[index];
  Intersection intersection = intersections[index];

  // Modified ray is written back to SSBO.
  //
  // On Apple, the WorkGroupSize is an attribute, and it looks like accessing it outside of main
  // means it's not forwarded.
  rays[index] = shade(ray, intersection, gl_WorkGroupSize.xy);
}
