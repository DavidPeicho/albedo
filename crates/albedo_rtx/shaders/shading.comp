#version 450

// #define EMIT_GBUFFER
// #define DEBUG_CWBVH_TRAVERSAL
// #define USE_PROBE

#include "imports/structures.glsl"
#include "imports/common.glsl"
#include "imports/colorspace.glsl"

struct TextureInfo
{
  uint x;
  uint y;
  uint width;
  uint layerAndHeight; // 24 bits for height, 8 bits for layer index.
};

struct Material
{
  vec4  color;
  float roughnessFactor;
  float metallic;
  uint  albedoTexture;
  // @todo: for now, metal in B channel and roughness in G.
  uint  mraTexture;
};

struct Parameters
{
  uint useNoiseTexture;
};

layout(set = 0, binding = 0, std430) readonly buffer InstanceBuffer {
  Instance instances[];
};

layout(set = 0, binding = 1, std430) readonly buffer BVHNodeBuffer {
  BVHNode nodes[];
};

layout (set = 0, binding = 2, std430) readonly buffer CWBVHTriangleBuffer {
  vec4 trianglesCWBVH[];
};

layout(set = 0, binding = 3, std430) readonly buffer VertexBuffer {
  Vertex vertices[];
};

// @todo: move to uniform?
layout(set = 0, binding = 4, std430) readonly buffer LightBuffer {
  Light lights[];
};

layout(set = 1, binding = 0, std430) readonly buffer MaterialBuffer {
  Material materials[];
};

layout(set = 1, binding = 1) uniform texture2D Probe;

layout(set = 1, binding = 2) uniform utexture1D textureInfo;

layout(set = 1, binding = 3) uniform texture2DArray textureAtlas;

layout(set = 1, binding = 4) uniform sampler samplerNearest;

layout(set = 1, binding = 5) uniform sampler samplerLinear;

layout(set = 1, binding = 6) uniform texture2D noiseTexture;

layout(set = 1, binding = 7) uniform ParametersUniformBuffer {
  Parameters parameters;
};

layout(set = 2, binding = 0, std430) buffer RayBuffer {
  RayPayload rays[];
};

layout(set = 2, binding = 1, std430) readonly buffer IntersectionBuffer {
  Intersection intersections[];
};

layout(set = 2, binding = 2) uniform GlobalUniformBuffer {
  GlobalUniforms global;
};

#ifdef EMIT_GBUFFER
layout(set = 2, binding = 3, rgba32ui) writeonly uniform image2D gbuffer;
layout(set = 2, binding = 4, rg32f) writeonly uniform image2D motion;

layout(push_constant) uniform pushConstants {
  mat4 previousWorldToScreen;
} constants;
#endif

/* Utils */

#include "imports/math.glsl"
#include "imports/intersection_utils.glsl"
#include "imports/texture_utils.glsl"
#include "imports/sampling.glsl"
#include "imports/packing.glsl"

vec3
decodeRGBE(vec4 hdr)
{
  return hdr.rgb * exp2((hdr.a * 255.0) - 128.0);
}

vec3
sampleProbe(sampler samp, texture2D probe, vec2 uv)
{
  return decodeRGBE(textureLod(sampler2D(probe, samp), uv, 0.0));
}

vec3
getThroughput(inout RayPayload ray)
{
  return vec3(ray.origin.w, ray.dir.w, ray.radiance.w);
}

void
setThroughput(inout RayPayload ray, vec3 throughput)
{
  ray.origin.w = throughput.x;
  ray.dir.w = throughput.y;
  ray.radiance.w = throughput.z;
}

vec2
cartesianToEqui(vec3 dir)
{
  dir = dir.xzy;
  vec2 longlat = vec2(atan(dir.y, dir.x), acos(dir.z));
  longlat.x += PI_F;
  // Normalize
  return longlat / vec2(2.0 * PI_F, PI_F);
}

vec3
interpolate(vec3 v0, vec3 v1, vec3 v2, vec3 barycentric)
{
  return (
    barycentric.x * v0 +
    barycentric.y * v1 +
    barycentric.z * v2
  );
}

vec2
interpolate(vec2 v0, vec2 v1, vec2 v2, vec3 barycentric)
{
  return (
    barycentric.x * v0 +
    barycentric.y * v1 +
    barycentric.z * v2
  );
}

vec3 evaluateProbe(vec3 dir) {
  float exposition = 0.25; // @todo: Expose exposition (no pun intended)
  vec2 uv = cartesianToEqui(dir);
  vec3 probe = sampleProbe(samplerLinear, Probe, uv);
  return probe * exposition;
}

layout(local_size_x = 8, local_size_y = 8) in;
void
main()
{
  uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
  if (index >= rays.length()) return;

  // Modified ray is written back to SSBO.
  //
  // On Apple, the WorkGroupSize is an attribute, and it looks like accessing it outside of main
  // means it's not forwarded.

  RayPayload ray = rays[index];
  if (ray.terminated.x > 0u) return;

  ray.terminated.y += 1;

  ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

  uint randState = uint(
    gl_GlobalInvocationID.x * uint(1973)
    + gl_GlobalInvocationID.y * uint(9277)
    + uint(global.seed) * uint(26699)
  ) | uint(1);

  if (parameters.useNoiseTexture > 0u) {
    vec2 texSize = vec2(textureSize(noiseTexture, 0));
    vec2 uv = mod(vec2(gl_GlobalInvocationID.xy) * 100.0, texSize);
    uv = uv/texSize;
    vec3 noise = textureLod(sampler2D(noiseTexture, samplerNearest), uv, 0.0).rgb;
    randState = uint(noise.x * 10.0) * uint(global.seed) * uint(26699);
  }

  Intersection intersection = intersections[index];

  #ifdef DEBUG_CWBVH_TRAVERSAL
  #ifdef EMIT_GBUFFER
  imageStore(gbuffer, coords, uvec4(0u));
  imageStore(motion, coords, vec4(0.0));
  #endif

  float stepCount = intersection.dist;
  ray.radiance.rgb = vec3(stepCount/1000.0);
  ray.terminated.x = 1u;
  rays[index] = ray;
  if (true) return; // naga validation bug
  #endif

  vec3 throughput = getThroughput(ray);
  if (abs(MAX_FLOAT - intersection.dist) < EPSILON)
  {
    #ifdef USE_PROBE
    ray.radiance.rgb += throughput * evaluateProbe(ray.dir.xyz);
    #else
    ray.radiance.rgb += throughput * vec3(0.7, 0.7, 1.2);
    #endif

    ray.terminated.x = 1u;
    rays[index] = ray;

    #ifdef EMIT_GBUFFER
    imageStore(gbuffer, coords, uvec4(0u));
    imageStore(motion, coords, vec4(0.0));
    #endif

    return;
  }

  #if 0
  if (intersection.emitter != INVALID_UINT)
  {
    Light light = lights[intersection.emitter];
    ray.radiance.rgb += throughput * vec3(1.0, 0.9, 0.8) * light.intensity;
    rays[index] = ray;

    #ifdef EMIT_GBUFFER
    imageStore(gbuffer, coords, uvec4(0u));
    imageStore(motion, coords, vec4(0.0));
    #endif

    return;
  }
  #endif

  Instance instance = instances[intersection.instance];

  Primitive primitive = extractPrimitive(instance, intersection);
  vec3 barycentric = barycentricCoordinates(intersection.uv);

  // @todo: clean up uvs. Should UVs and normal always be packed together
  // anyway? The intersection code only need vertices.
  vec2 uv0 = vec2(primitive.v0.position.w, primitive.v0.normal.w);
  vec2 uv1 = vec2(primitive.v1.position.w, primitive.v1.normal.w);
  vec2 uv2 = vec2(primitive.v2.position.w, primitive.v2.normal.w);

  vec2 uv = interpolate(uv0, uv1, uv2, barycentric);
  vec3 normal = interpolateBarycentric(
    primitive.v0.normal.xyz,
    primitive.v1.normal.xyz,
    primitive.v2.normal.xyz,
    barycentric
  );
  normal = transformDirection(normal, instance.modelToWorld);
  normal = normalize(normal);
  // Front and backface enabled
  float NdotV = -dot(normal, ray.dir.xyz);
  if(NdotV < 0.0) {
    normal *= -1.0;
  }

  Material inputMat = materials[intersection.materialIndex];

  MaterialState mat;
  mat.albedo = vec3(1.0);

  vec3 albedo = sRGBToLinear(inputMat.color.rgb);
  if (inputMat.albedoTexture != MAX_UINT)
  {
    // @todo: pre-convert?
    albedo *= sRGBToLinear(fetchTexture(inputMat.albedoTexture, uv).rgb);
  }
  mat.albedo = albedo;
  mat.metallic = inputMat.metallic;
  mat.perceptualRoughness = inputMat.roughnessFactor;
  if (inputMat.mraTexture != MAX_UINT)
  {
    vec4 mraFetch = fetchTexture(inputMat.mraTexture, uv).rgba;
    mat.perceptualRoughness *= mraFetch.g;
    mat.metallic *= mraFetch.b;
  }
  mat.perceptualRoughness = max(EPSILON, mat.perceptualRoughness);
  mat.roughness = max(EPSILON, mat.perceptualRoughness * mat.perceptualRoughness);
  mat.roughness2 = mat.roughness * mat.roughness;

  BSDFSample bsdf = sampleBSDF_UE4(- ray.dir.xyz, normal, mat, randState);
  if (bsdf.pdf > EPSILON)
      throughput *= evalSample_UE4(bsdf, normal, mat) * abs(bsdf.NdotL) / bsdf.pdf;

  ray.origin.xyz += intersection.dist * ray.dir.xyz + normal * 1e-4;
  ray.dir.xyz = bsdf.dir;

  setThroughput(ray, throughput);

  rays[index] = ray;

  #ifdef EMIT_GBUFFER
  vec2 currPos2d = vec2(coords) / vec2(gl_WorkGroupSize * gl_NumWorkGroups);

  vec3 posLocal = interpolateBarycentric(
    primitive.v0.position.xyz,
    primitive.v1.position.xyz,
    primitive.v2.position.xyz,
    barycentric
  );
  vec4 worldPos = instance.modelToWorld * vec4(posLocal, 1.0);
  vec4 prevProjectedPos = constants.previousWorldToScreen * worldPos;
  vec2 prevPos2d = (prevProjectedPos.xy / prevProjectedPos.w) * vec2(0.5) + vec2(0.5);
  vec2 motionVector = currPos2d - prevPos2d;

  imageStore(gbuffer, coords, packGbuffer(normal, intersection.dist, albedo, intersection.instance));
  imageStore(motion, coords, vec4(motionVector, 0.0, 0.0));
  #endif
}
