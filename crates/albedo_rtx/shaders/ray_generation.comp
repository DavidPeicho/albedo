#version 450

#include "imports/structures.glsl"

/**
 * Layout 0
 */

// @todo: use writeonly when WGPU supports it.
layout (set = 0, binding = 0, std430) buffer RayBuffer {
  RayPayload rays[];
};

layout (set = 0, binding = 1) uniform CameraUniformsBuffer {
  vec3 origin;
  float vFOV;
  vec3 up;
  float padding_0;
  vec3 right;
  float padding_1;
  uvec2 dimensions;
  uvec2 padding_2;
} camera;

// @todo: not hardcoding that means generating the shader at runtime
layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
  if (index >= rays.length()) return;

  vec2 halfSize = vec2(camera.dimensions) * 0.5;
  vec3 clip = vec3(vec2(gl_GlobalInvocationID.xy) - halfSize, halfSize.y / tan(camera.vFOV * 0.5));
  // TODO: pack direction directly?
  vec3 forward = normalize(cross(camera.up, camera.right));

  // `throughput` is packed in `origin.w`, `dir.w`, and `radiance.w`.
  RayPayload ray;
  ray.origin = vec4(camera.origin, 1.0);
  ray.dir = vec4(normalize(clip.x * camera.right + clip.y * camera.up + clip.z * forward), 1.0);
  ray.radiance = vec4(0.0, 0.0, 0.0, 1.0);
  ray.terminated = uvec4(0u);

  rays[index] = ray;
}
